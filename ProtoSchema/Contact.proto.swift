/// Generated by the Protocol Buffers 3.6.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "contact.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct ContactRoot {
    public static let `default` = ContactRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class Contact : GeneratedMessage {
    public typealias BuilderType = Contact.Builder

    public static func == (lhs: Contact, rhs: Contact) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasFirstName == rhs.hasFirstName) && (!lhs.hasFirstName || lhs.firstName == rhs.firstName)
        fieldCheck = fieldCheck && (lhs.hasLastName == rhs.hasLastName) && (!lhs.hasLastName || lhs.lastName == rhs.lastName)
        fieldCheck = fieldCheck && (lhs.hasTwitterName == rhs.hasTwitterName) && (!lhs.hasTwitterName || lhs.twitterName == rhs.twitterName)
        fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
        fieldCheck = fieldCheck && (lhs.hasGithubLink == rhs.hasGithubLink) && (!lhs.hasGithubLink || lhs.githubLink == rhs.githubLink)
        fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
        fieldCheck = fieldCheck && (lhs.hasImageName == rhs.hasImageName) && (!lhs.hasImageName || lhs.imageName == rhs.imageName)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



        //Enum type declaration start 

        public enum ContactType:Int32, GeneratedEnum {
            case speaker = 0
            case attendant = 1
            case volunteer = 2
            public func toString() -> String {
                switch self {
                case .speaker: return "SPEAKER"
                case .attendant: return "ATTENDANT"
                case .volunteer: return "VOLUNTEER"
                }
            }
            public static func fromString(_ str:String) throws -> Contact.ContactType {
                switch str {
                case "SPEAKER":    return .speaker
                case "ATTENDANT":    return .attendant
                case "VOLUNTEER":    return .volunteer
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .speaker: return ".speaker"
                case .attendant: return ".attendant"
                case .volunteer: return ".volunteer"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:ContactType, rhs:ContactType) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 

    public fileprivate(set) var firstName:String! = nil
    public fileprivate(set) var hasFirstName:Bool = false

    public fileprivate(set) var lastName:String! = nil
    public fileprivate(set) var hasLastName:Bool = false

    public fileprivate(set) var twitterName:String! = nil
    public fileprivate(set) var hasTwitterName:Bool = false

    public fileprivate(set) var email:String! = nil
    public fileprivate(set) var hasEmail:Bool = false

    public fileprivate(set) var githubLink:String! = nil
    public fileprivate(set) var hasGithubLink:Bool = false

    public fileprivate(set) var type:Contact.ContactType = Contact.ContactType.speaker
    public fileprivate(set) var hasType:Bool = false
    public fileprivate(set) var imageName:String! = nil
    public fileprivate(set) var hasImageName:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasFirstName {
            try codedOutputStream.writeString(fieldNumber: 1, value:firstName)
        }
        if hasLastName {
            try codedOutputStream.writeString(fieldNumber: 2, value:lastName)
        }
        if hasTwitterName {
            try codedOutputStream.writeString(fieldNumber: 3, value:twitterName)
        }
        if hasEmail {
            try codedOutputStream.writeString(fieldNumber: 4, value:email)
        }
        if hasGithubLink {
            try codedOutputStream.writeString(fieldNumber: 5, value:githubLink)
        }
        if hasType {
            try codedOutputStream.writeEnum(fieldNumber: 6, value:type.rawValue)
        }
        if hasImageName {
            try codedOutputStream.writeString(fieldNumber: 7, value:imageName)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasFirstName {
            serialize_size += firstName.computeStringSize(fieldNumber: 1)
        }
        if hasLastName {
            serialize_size += lastName.computeStringSize(fieldNumber: 2)
        }
        if hasTwitterName {
            serialize_size += twitterName.computeStringSize(fieldNumber: 3)
        }
        if hasEmail {
            serialize_size += email.computeStringSize(fieldNumber: 4)
        }
        if hasGithubLink {
            serialize_size += githubLink.computeStringSize(fieldNumber: 5)
        }
        if (hasType) {
            serialize_size += type.rawValue.computeEnumSize(fieldNumber: 6)
        }
        if hasImageName {
            serialize_size += imageName.computeStringSize(fieldNumber: 7)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> Contact.Builder {
        return Contact.classBuilder() as! Contact.Builder
    }
    public func getBuilder() -> Contact.Builder {
        return classBuilder() as! Contact.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Contact.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Contact.Builder()
    }
    public func toBuilder() throws -> Contact.Builder {
        return try Contact.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Contact) throws -> Contact.Builder {
        return try Contact.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasFirstName {
            jsonMap["firstName"] = firstName
        }
        if hasLastName {
            jsonMap["lastName"] = lastName
        }
        if hasTwitterName {
            jsonMap["twitterName"] = twitterName
        }
        if hasEmail {
            jsonMap["email"] = email
        }
        if hasGithubLink {
            jsonMap["githubLink"] = githubLink
        }
        if hasType {
            jsonMap["type"] = type.toString()
        }
        if hasImageName {
            jsonMap["imageName"] = imageName
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Contact {
        return try Contact.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> Contact {
        return try Contact.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasFirstName {
            output += "\(indent) firstName: \(firstName) \n"
        }
        if hasLastName {
            output += "\(indent) lastName: \(lastName) \n"
        }
        if hasTwitterName {
            output += "\(indent) twitterName: \(twitterName) \n"
        }
        if hasEmail {
            output += "\(indent) email: \(email) \n"
        }
        if hasGithubLink {
            output += "\(indent) githubLink: \(githubLink) \n"
        }
        if (hasType) {
            output += "\(indent) type: \(type.description)\n"
        }
        if hasImageName {
            output += "\(indent) imageName: \(imageName) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFirstName {
                hashCode = (hashCode &* 31) &+ firstName.hashValue
            }
            if hasLastName {
                hashCode = (hashCode &* 31) &+ lastName.hashValue
            }
            if hasTwitterName {
                hashCode = (hashCode &* 31) &+ twitterName.hashValue
            }
            if hasEmail {
                hashCode = (hashCode &* 31) &+ email.hashValue
            }
            if hasGithubLink {
                hashCode = (hashCode &* 31) &+ githubLink.hashValue
            }
            if hasType {
                 hashCode = (hashCode &* 31) &+ type.hashValue
            }
            if hasImageName {
                hashCode = (hashCode &* 31) &+ imageName.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Contact"
    }
    override public func className() -> String {
        return "Contact"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:Contact = Contact()
        public func getMessage() -> Contact {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var firstName:String {
            get {
                return builderResult.firstName
            }
            set (value) {
                builderResult.hasFirstName = true
                builderResult.firstName = value
            }
        }
        public var hasFirstName:Bool {
            get {
                return builderResult.hasFirstName
            }
        }
        @discardableResult
        public func setFirstName(_ value:String) -> Contact.Builder {
            self.firstName = value
            return self
        }
        @discardableResult
        public func clearFirstName() -> Contact.Builder{
            builderResult.hasFirstName = false
            builderResult.firstName = nil
            return self
        }
        public var lastName:String {
            get {
                return builderResult.lastName
            }
            set (value) {
                builderResult.hasLastName = true
                builderResult.lastName = value
            }
        }
        public var hasLastName:Bool {
            get {
                return builderResult.hasLastName
            }
        }
        @discardableResult
        public func setLastName(_ value:String) -> Contact.Builder {
            self.lastName = value
            return self
        }
        @discardableResult
        public func clearLastName() -> Contact.Builder{
            builderResult.hasLastName = false
            builderResult.lastName = nil
            return self
        }
        public var twitterName:String {
            get {
                return builderResult.twitterName
            }
            set (value) {
                builderResult.hasTwitterName = true
                builderResult.twitterName = value
            }
        }
        public var hasTwitterName:Bool {
            get {
                return builderResult.hasTwitterName
            }
        }
        @discardableResult
        public func setTwitterName(_ value:String) -> Contact.Builder {
            self.twitterName = value
            return self
        }
        @discardableResult
        public func clearTwitterName() -> Contact.Builder{
            builderResult.hasTwitterName = false
            builderResult.twitterName = nil
            return self
        }
        public var email:String {
            get {
                return builderResult.email
            }
            set (value) {
                builderResult.hasEmail = true
                builderResult.email = value
            }
        }
        public var hasEmail:Bool {
            get {
                return builderResult.hasEmail
            }
        }
        @discardableResult
        public func setEmail(_ value:String) -> Contact.Builder {
            self.email = value
            return self
        }
        @discardableResult
        public func clearEmail() -> Contact.Builder{
            builderResult.hasEmail = false
            builderResult.email = nil
            return self
        }
        public var githubLink:String {
            get {
                return builderResult.githubLink
            }
            set (value) {
                builderResult.hasGithubLink = true
                builderResult.githubLink = value
            }
        }
        public var hasGithubLink:Bool {
            get {
                return builderResult.hasGithubLink
            }
        }
        @discardableResult
        public func setGithubLink(_ value:String) -> Contact.Builder {
            self.githubLink = value
            return self
        }
        @discardableResult
        public func clearGithubLink() -> Contact.Builder{
            builderResult.hasGithubLink = false
            builderResult.githubLink = nil
            return self
        }
            public var type:Contact.ContactType {
                get {
                    return builderResult.type
                }
                set (value) {
                    builderResult.hasType = true
                    builderResult.type = value
                }
            }
            public var hasType:Bool{
                get {
                    return builderResult.hasType
                }
            }
        @discardableResult
            public func setType(_ value:Contact.ContactType) -> Contact.Builder {
              self.type = value
              return self
            }
        @discardableResult
            public func clearType() -> Contact.Builder {
               builderResult.hasType = false
               builderResult.type = .speaker
               return self
            }
        public var imageName:String {
            get {
                return builderResult.imageName
            }
            set (value) {
                builderResult.hasImageName = true
                builderResult.imageName = value
            }
        }
        public var hasImageName:Bool {
            get {
                return builderResult.hasImageName
            }
        }
        @discardableResult
        public func setImageName(_ value:String) -> Contact.Builder {
            self.imageName = value
            return self
        }
        @discardableResult
        public func clearImageName() -> Contact.Builder{
            builderResult.hasImageName = false
            builderResult.imageName = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> Contact.Builder {
            builderResult = Contact()
            return self
        }
        override public func clone() throws -> Contact.Builder {
            return try Contact.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> Contact {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> Contact {
            let returnMe:Contact = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:Contact) throws -> Contact.Builder {
            if other == Contact() {
                return self
            }
            if other.hasFirstName {
                firstName = other.firstName
            }
            if other.hasLastName {
                lastName = other.lastName
            }
            if other.hasTwitterName {
                twitterName = other.twitterName
            }
            if other.hasEmail {
                email = other.email
            }
            if other.hasGithubLink {
                githubLink = other.githubLink
            }
            if other.hasType {
                type = other.type
            }
            if other.hasImageName {
                imageName = other.imageName
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Contact.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Contact.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    firstName = try codedInputStream.readString()

                case 18:
                    lastName = try codedInputStream.readString()

                case 26:
                    twitterName = try codedInputStream.readString()

                case 34:
                    email = try codedInputStream.readString()

                case 42:
                    githubLink = try codedInputStream.readString()

                case 48:
                    let valueInttype = try codedInputStream.readEnum()
                    if let enumstype = Contact.ContactType(rawValue:valueInttype){
                        type = enumstype
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 6, value:Int64(valueInttype))
                    }

                case 58:
                    imageName = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Contact.Builder {
            let resultDecodedBuilder = Contact.Builder()
            if let jsonValueFirstName = jsonMap["firstName"] as? String {
                resultDecodedBuilder.firstName = jsonValueFirstName
            }
            if let jsonValueLastName = jsonMap["lastName"] as? String {
                resultDecodedBuilder.lastName = jsonValueLastName
            }
            if let jsonValueTwitterName = jsonMap["twitterName"] as? String {
                resultDecodedBuilder.twitterName = jsonValueTwitterName
            }
            if let jsonValueEmail = jsonMap["email"] as? String {
                resultDecodedBuilder.email = jsonValueEmail
            }
            if let jsonValueGithubLink = jsonMap["githubLink"] as? String {
                resultDecodedBuilder.githubLink = jsonValueGithubLink
            }
            if let jsonValueType = jsonMap["type"] as? String {
                resultDecodedBuilder.type = try Contact.ContactType.fromString(jsonValueType)
            }
            if let jsonValueImageName = jsonMap["imageName"] as? String {
                resultDecodedBuilder.imageName = jsonValueImageName
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> Contact.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Contact.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class Speakers : GeneratedMessage {
    public typealias BuilderType = Speakers.Builder

    public static func == (lhs: Speakers, rhs: Speakers) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.contacts == rhs.contacts)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var contacts:Array<Contact>  = Array<Contact>()
    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        for oneElementContacts in contacts {
              try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementContacts)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        for oneElementContacts in contacts {
            serialize_size += oneElementContacts.computeMessageSize(fieldNumber: 1)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> Speakers.Builder {
        return Speakers.classBuilder() as! Speakers.Builder
    }
    public func getBuilder() -> Speakers.Builder {
        return classBuilder() as! Speakers.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Speakers.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Speakers.Builder()
    }
    public func toBuilder() throws -> Speakers.Builder {
        return try Speakers.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Speakers) throws -> Speakers.Builder {
        return try Speakers.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if !contacts.isEmpty {
            var jsonArrayContacts:Array<Dictionary<String,Any>> = []
            for oneValueContacts in contacts {
                let ecodedMessageContacts = try oneValueContacts.encode()
                jsonArrayContacts.append(ecodedMessageContacts)
            }
            jsonMap["contacts"] = jsonArrayContacts
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Speakers {
        return try Speakers.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> Speakers {
        return try Speakers.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        var contactsElementIndex:Int = 0
        for oneElementContacts in contacts {
            output += "\(indent) contacts[\(contactsElementIndex)] {\n"
            output += try oneElementContacts.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            contactsElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementContacts in contacts {
                hashCode = (hashCode &* 31) &+ oneElementContacts.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Speakers"
    }
    override public func className() -> String {
        return "Speakers"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:Speakers = Speakers()
        public func getMessage() -> Speakers {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var contacts:Array<Contact> {
            get {
                return builderResult.contacts
            }
            set (value) {
                builderResult.contacts = value
            }
        }
        @discardableResult
        public func setContacts(_ value:Array<Contact>) -> Speakers.Builder {
            self.contacts = value
            return self
        }
        @discardableResult
        public func clearContacts() -> Speakers.Builder {
            builderResult.contacts.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> Speakers.Builder {
            builderResult = Speakers()
            return self
        }
        override public func clone() throws -> Speakers.Builder {
            return try Speakers.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> Speakers {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> Speakers {
            let returnMe:Speakers = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:Speakers) throws -> Speakers.Builder {
            if other == Speakers() {
                return self
            }
            if !other.contacts.isEmpty  {
                 builderResult.contacts += other.contacts
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Speakers.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Speakers.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder = Contact.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    contacts.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Speakers.Builder {
            let resultDecodedBuilder = Speakers.Builder()
            if let jsonValueContacts = jsonMap["contacts"] as? Array<Dictionary<String,Any>> {
                var jsonArrayContacts:Array<Contact> = []
                for oneValueContacts in jsonValueContacts {
                    let messageFromStringContacts = try Contact.Builder.decodeToBuilder(jsonMap:oneValueContacts).build()

                    jsonArrayContacts.append(messageFromStringContacts)
                }
                resultDecodedBuilder.contacts = jsonArrayContacts
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> Speakers.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Speakers.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension Contact: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Contact> {
        var mergedArray = Array<Contact>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Contact? {
        return try Contact.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Contact {
        return try Contact.Builder().mergeFrom(data: data, extensionRegistry:ContactRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Contact {
        return try Contact.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Contact {
        return try Contact.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Contact {
        return try Contact.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Contact {
        return try Contact.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Contact {
        return try Contact.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "firstName": return self.firstName
        case "lastName": return self.lastName
        case "twitterName": return self.twitterName
        case "email": return self.email
        case "githubLink": return self.githubLink
        case "type": return self.type
        case "imageName": return self.imageName
        default: return nil
        }
    }
}
extension Contact.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Contact
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "firstName": return self.firstName
            case "lastName": return self.lastName
            case "twitterName": return self.twitterName
            case "email": return self.email
            case "githubLink": return self.githubLink
            case "type": return self.type
            case "imageName": return self.imageName
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "firstName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.firstName = newSubscriptValue
            case "lastName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.lastName = newSubscriptValue
            case "twitterName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.twitterName = newSubscriptValue
            case "email":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.email = newSubscriptValue
            case "githubLink":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.githubLink = newSubscriptValue
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? Contact.ContactType else {
                    return
                }
                self.type = newSubscriptValue
            case "imageName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.imageName = newSubscriptValue
            default: return
            }
        }
    }
}
extension Speakers: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Speakers> {
        var mergedArray = Array<Speakers>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Speakers? {
        return try Speakers.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Speakers {
        return try Speakers.Builder().mergeFrom(data: data, extensionRegistry:ContactRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Speakers {
        return try Speakers.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Speakers {
        return try Speakers.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Speakers {
        return try Speakers.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Speakers {
        return try Speakers.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Speakers {
        return try Speakers.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "contacts": return self.contacts
        default: return nil
        }
    }
}
extension Speakers.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Speakers
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "contacts": return self.contacts
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "contacts":
                guard let newSubscriptValue = newSubscriptValue as? Array<Contact> else {
                    return
                }
                self.contacts = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
